<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:controlzEx="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.combobox.xaml" />
        <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.T.xaml" />-->
        <ResourceDictionary Source="pack://application:,,,/TailBlazer;component/Themes/TextBoxes.xaml" />


    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="BorderOnlyValidationErrorTemplate">
        <ControlTemplate.Resources>
            <DataTemplate DataType="{x:Type ValidationError}">
                <!--<TextBlock Foreground="{DynamicResource ValidationErrorBrush}"
                               FontSize="10"
                               MaxWidth="250"
                               Margin="2"
                               TextWrapping="Wrap"
                               Text="{Binding ErrorContent}"
                               UseLayoutRounding="false" />-->
            </DataTemplate>
        </ControlTemplate.Resources>
        <StackPanel>
            <AdornedElementPlaceholder Name="Placeholder" />
            <Border Name="DefaultErrorViewer"
              Visibility="Collapsed"
              Background="{DynamicResource MaterialDesignPaper}">
                <ContentPresenter Content="{Binding CurrentItem}" />
            </Border>

            <controlzEx:PopupEx x:Name="ValidationPopup"
                        IsOpen="False"
                        Placement="Bottom"
                        PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}"
                        AllowsTransparency="True">
                <Border Background="{DynamicResource MaterialDesignPaper}">
                    <ContentPresenter Content="{Binding CurrentItem}" />
                </Border>
            </controlzEx:PopupEx>
        </StackPanel>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="False"/>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="True"/>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.Suppress)}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="False"/>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="False"/>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.Suppress)}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="DefaultErrorViewer" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="True"/>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="ValidationPopup" Property="IsOpen"
                  Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="True"/>
                    <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="DefaultErrorViewer" Property="Visibility"
                  Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ValidatableHintTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot"
              SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="toggleButton"
                          Grid.ColumnSpan="2"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{StaticResource MaterialDesignComboBoxToggleButton}" />
            <Grid Margin="{TemplateBinding Padding}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <TextBlock x:Name="Hint"
                           IsHitTestVisible="False"
                           Opacity="{Binding Path=(wpf:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                           Text="{TemplateBinding wpf:HintAssist.Hint}"
                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                           
                           Validation.ErrorTemplate="{StaticResource BorderOnlyValidationErrorTemplate}" 
                           UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                           Visibility="{TemplateBinding Text, Converter={StaticResource TextFieldHintVisibilityConverter}}" />
                <ContentPresenter x:Name="contentPresenter"
                                  Content="{TemplateBinding SelectionBoxItem}"
                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                  IsHitTestVisible="false"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
                <TextBox x:Name="PART_EditableTextBox"
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Style="{StaticResource FloatingHintAndErrorTextBox}"
                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                         UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                         Visibility="Collapsed" />
            </Grid>
            <!--<wpf:Underline x:Name="Underline"
                           Grid.ColumnSpan="2"
                           IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                           Visibility="Collapsed" />-->

            <wpf:ComboBoxPopup x:Name="PART_Popup"
                               AllowsTransparency="true"
                               Focusable="False"
                               HorizontalOffset="-11"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               PlacementTarget="{Binding ElementName=templateRoot}"
                               Placement="Custom"
                               SnapsToDevicePixels="True"
                               PopupAnimation="Fade"
                               VerticalOffset="0"
                               DefaultVerticalOffset="5"
                               DownVerticalOffset="-15"
                               UpVerticalOffset="15"
                               UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                               DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                               DefaultContentTemplate="{StaticResource PopupContentDefaultTemplate}">
                <ContentControl>
                    <ScrollViewer Background="{DynamicResource MaterialDesignPaper}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                    </ScrollViewer>
                </ContentControl>
            </wpf:ComboBoxPopup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <!--<Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(wpf:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />-->
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False"/>
                    <Condition Property="IsDropDownOpen" Value="True"/>
                </MultiTrigger.Conditions>
                <!--<Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>-->
                <Setter TargetName="toggleButton" Property="Visibility" Value="Hidden"/>
            </MultiTrigger>

            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                <!--<Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>-->
                <Setter TargetName="PART_EditableTextBox" Property="Foreground" Value="{DynamicResource ValidationErrorBrush}"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                <!--<Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>-->
                <Setter  Property="Foreground"  Value="{DynamicResource ValidationErrorBrush}"/>
            </Trigger>
            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MaterialDesignComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemSelectedCollapsedStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="0 4 0 5" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource ValidatableHintTemplate}" />

            <!--<Style.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="true">
                    <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                </Trigger>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="IsTabStop" Value="false" />
                </Trigger>

            </Style.Triggers>
        </Style.Triggers>-->

    </Style>

    <Style x:Key="FloatingHintAndErrorComboBox"
           BasedOn="{StaticResource MaterialDesignComboBox}"
           TargetType="{x:Type ComboBox}">
        <Setter Property="Template" Value="{StaticResource MaterialDesignFloatingHintComboBoxTemplate}" />
        <Setter Property="wpf:HintAssist.Text" Value="{Binding RelativeSource={RelativeSource Self}, Path=Text}" />
        <Setter Property="wpf:HintAssist.Managed" Value="{Binding RelativeSource={RelativeSource Self}}" />

    </Style>
    
</ResourceDictionary>